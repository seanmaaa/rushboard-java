buildscript {
    ext {
        springBootVersion = '2.4.3'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "org.sonarqube" version "3.2.0"
}

sonarqube {
    properties {
        property "sonar.projectKey", "rushboard_rushboard-java"
        property "sonar.organization", "rushboard"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

allprojects {
    group = 'com.rushboard'
    version = '0.0.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'

    sourceCompatibility = '11'

    repositories {
        mavenCentral()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.2'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.2'
        testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

        compile group: 'com.typesafe.akka', name: 'akka-actor-typed_2.12', version: '2.5.32'
    }

    test {
        useJUnitPlatform()
    }
}

project(':module-core') {
    bootJar {
        enabled = false
    }

    bootRun {
        enabled = false
    }

    allprojects {
        configurations {
            runtime.exclude group: 'org.springframework.boot'
            runtime.exclude group: 'com.typesafe.akka'
            compile.exclude group: 'org.springframework.boot'
            compile.exclude group: 'com.typesafe.akka'
        }
    }

    subprojects {
        task initSourceFolders {
            sourceSets*.java.srcDirs*.each {
                if (!it.exists()) {
                    it.mkdirs()
                }
            }
            sourceSets*.resources.srcDirs*.each {
                if (!it.exists()) {
                    it.mkdirs()
                }
            }
        }
    }
}

project(':module-infrastructure') {
    bootJar {
        enabled = false
    }

    bootRun {
        enabled = false
    }

    subprojects {
        task initSourceFolders {
            sourceSets*.java.srcDirs*.each {
                if (!it.exists()) {
                    it.mkdirs()
                }
            }
            sourceSets*.resources.srcDirs*.each {
                if (!it.exists()) {
                    it.mkdirs()
                }
            }
        }
    }
}

project(':module-client') {
    bootJar {
        enabled = false
    }

    bootRun {
        enabled = false
    }

    subprojects {
        dependencies {
            implementation group: 'io.projectreactor', name: 'reactor-core', version: '3.4.3'
        }

        task initSourceFolders {
            sourceSets*.java.srcDirs*.each {
                if (!it.exists()) {
                    it.mkdirs()
                }
            }
            sourceSets*.resources.srcDirs*.each {
                if (!it.exists()) {
                    it.mkdirs()
                }
            }
        }
    }
}

project(':module-application') {
    bootJar {
        enabled = false
    }

    bootRun {
        enabled = false
    }

    subprojects {
        task initSourceFolders {
            sourceSets*.java.srcDirs*.each {
                if (!it.exists()) {
                    it.mkdirs()
                }
            }
            sourceSets*.resources.srcDirs*.each {
                if (!it.exists()) {
                    it.mkdirs()
                }
            }
        }
    }
}

project(':module-gateway') {
    bootJar {
        enabled = false
    }

    bootRun {
        enabled = false
    }

    subprojects {
        task initSourceFolders {
            sourceSets*.java.srcDirs*.each {
                if (!it.exists()) {
                    it.mkdirs()
                }
            }
            sourceSets*.resources.srcDirs*.each {
                if (!it.exists()) {
                    it.mkdirs()
                }
            }
        }
    }
}
